{"ast":null,"code":"import Server from './server';\nconst Backend = new Server();\n\nclass ApiController {\n  constructor() {\n    this.pressTag = null;\n    const environment = 'production';\n    this.root = Backend.clients[environment].root;\n    this.key = Backend.clients[environment].key;\n    this.headers = new Headers({\n      'Content-Type': 'application/json',\n      'X-Application-Key': this.key\n    });\n  } //App\n\n\n  async setPassword(token, password) {\n    const response = await fetch(`${this.root}/recovery`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        token,\n        password\n      })\n    });\n\n    if (response.status === 204) {\n      return true;\n    } else {\n      throw new Error(response.status);\n    }\n  }\n\n  async verify(token) {\n    const response = await fetch(`${this.root}/verify`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        token\n      })\n    });\n\n    if (response.status === 204) {\n      return true;\n    } else {\n      throw new Error(response.status);\n    }\n  }\n\n}\n\nexport default ApiController;","map":{"version":3,"names":["Server","Backend","ApiController","constructor","pressTag","environment","root","clients","key","headers","Headers","setPassword","token","password","response","fetch","method","body","JSON","stringify","status","Error","verify"],"sources":["/Users/mac/Documents/nuevo/src/components/AppRoutes/api.js"],"sourcesContent":["import Server from './server';\n\nconst Backend = new Server();\n\nclass ApiController {\n  pressTag = null;\n\n  constructor() {\n    const environment = 'production';\n    this.root = Backend.clients[environment].root;\n    this.key = Backend.clients[environment].key;\n\n    this.headers = new Headers({\n      'Content-Type': 'application/json',\n      'X-Application-Key': this.key,\n    });\n  }\n\n  //App\n\n  async setPassword(token, password) {\n    const response = await fetch(`${this.root}/recovery`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({ token, password }),\n    });\n\n    if (response.status === 204) {\n      return true;\n    } else {\n      throw new Error(response.status);\n    }\n  }\n\n  async verify(token) {\n    const response = await fetch(`${this.root}/verify`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({ token }),\n    });\n\n    if (response.status === 204) {\n      return true;\n    } else {\n      throw new Error(response.status);\n    }\n  }\n}\n\nexport default ApiController;\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAG,IAAID,MAAJ,EAAhB;;AAEA,MAAME,aAAN,CAAoB;EAGlBC,WAAW,GAAG;IAAA,KAFdC,QAEc,GAFH,IAEG;IACZ,MAAMC,WAAW,GAAG,YAApB;IACA,KAAKC,IAAL,GAAYL,OAAO,CAACM,OAAR,CAAgBF,WAAhB,EAA6BC,IAAzC;IACA,KAAKE,GAAL,GAAWP,OAAO,CAACM,OAAR,CAAgBF,WAAhB,EAA6BG,GAAxC;IAEA,KAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY;MACzB,gBAAgB,kBADS;MAEzB,qBAAqB,KAAKF;IAFD,CAAZ,CAAf;EAID,CAZiB,CAclB;;;EAEiB,MAAXG,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKT,IAAK,WAAd,EAA0B;MACpDU,MAAM,EAAE,OAD4C;MAEpDP,OAAO,EAAE,KAAKA,OAFsC;MAGpDQ,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEP,KAAF;QAASC;MAAT,CAAf;IAH8C,CAA1B,CAA5B;;IAMA,IAAIC,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;MAC3B,OAAO,IAAP;IACD,CAFD,MAEO;MACL,MAAM,IAAIC,KAAJ,CAAUP,QAAQ,CAACM,MAAnB,CAAN;IACD;EACF;;EAEW,MAANE,MAAM,CAACV,KAAD,EAAQ;IAClB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKT,IAAK,SAAd,EAAwB;MAClDU,MAAM,EAAE,MAD0C;MAElDP,OAAO,EAAE,KAAKA,OAFoC;MAGlDQ,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEP;MAAF,CAAf;IAH4C,CAAxB,CAA5B;;IAMA,IAAIE,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;MAC3B,OAAO,IAAP;IACD,CAFD,MAEO;MACL,MAAM,IAAIC,KAAJ,CAAUP,QAAQ,CAACM,MAAnB,CAAN;IACD;EACF;;AA1CiB;;AA6CpB,eAAelB,aAAf"},"metadata":{},"sourceType":"module"}